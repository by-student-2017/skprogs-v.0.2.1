#-----------------------------------------------------------------------------------------
# Generated by cif2cell 1.2.47.  :  Failed to get author information, No journal information.
#-----------------------------------------------------------------------------------------
# LAMMPS 64-bit 22Dec2022-MSMPI 
#------------------------------ 
# Run command for Windows: 
#  set OMP_NUM_THREADS=1 
#  mkdir cfg 
#  "C:\Program Files\Microsoft MPI\Bin\mpiexec.exe" -np 4 "C:\Program Files\LAMMPS 64-bit 22Dec2022-MSMPIin\lmp.exe" -in in.lmp 
#------------------------------ 
# Run command for Linux: 
#  export OMP_NUM_THREADS=1 
#  mkdir cfg 
#  mpirun -np 4 lmp_mpi -in in.lmp 
#------------------------------ 
#-----------------------------------------------------------------------------------------
clear 
echo both # echoes each input script command to both log file and screen 
#-------------------- Environment Settings -----------------------------------------------
variable HT equal  1500.00 # Desired High Temperature [K] 
variable HP equal   1.0000 # Desired High Pressure [bar] (= 100 [kPa] = 0.1 [MPa]) 

variable LT equal 77.0 # Desired Low Temperature [K] (77.0 K = Liquid N2, 298.15 K = Room temperature)
variable LP equal  0.0 # Desired Low Pressure [bar] (= 100 [kPa] = 0.1 [MPa]) 

variable   Nsteps equal     8000 # Number of simulation cycles 

variable    dt_es equal   1.0000 # [fs] 
variable  es_rate equal  -0.04 # engineering strain rate (1/time units) (Negative value for compression) 
#-------------------- 
# Note: es_rate/dt_es = -0.04 / (1e-15) = -4.0e12 [1/s] 
# L(t) = L(0)*(1 + es_rate*dt*step) 
# strain [%] = es_rate*dt*Nstep*100 [%] = -32000.0 [%] (Negative value for compression) 
#-------------------- 

#-------------------- Initialization -----------------------------------------------------
units real     # determines units of all quantities used in the input file 
dimension 3 
boundary p p p # periodic boundary condition 

atom_style charge 
read_data POSCAR.data

#replicate 1 1 1 

variable elem string "Y"

#-------------------- Force field --------------------------------------------------------
pair_style reax/c NULL 
pair_coeff * * ./NIST_POTLIB/ffield.reax ${elem} 

# Handle charges using the QEq method. 
fix q1 all qeq/reax 1 0.0 10.0 1e-6 reax/c 

#-------------------- 
#Note: ReaxFF and AIREBO are suitable for molecular calculations. 
# MEAM, EAM, FS, and ADP are suitable for crystal calculations. 
# All potentials are weak in calculations between interfaces and molecules 
# (potentials are often not reproduced well unless parameters are changed with this in mind). 
#-------------------- 
#Caution: Although often misunderstood, 
# MEAM, EAM and ADP take into account the concepts of many-body effects and universal potential. 
# FS takes into account many-body effects based on the theory of tight binding method. 
# AIREBO and Tersoff take into account the concepts of universal potential. 
#-------------------- 
# It is also good to remember that MEAM etc. can be created using potfit, MPC, etc. 
#-------------------- 
#Attension!!!: These potentials basically do not take spin into account, 
# so good results are often not obtained in environments where phase transformation occurs. 
#-------------------- 
#Attension!!!: Neural networks (NNs) do not explicitly consider magnetism in their formulas 
# (unless otherwise specified, NNs also do not explicitly consider electric charges in their formulas). 
# Therefore, it must be remembered that NNs cannot deal with external magnetism or voltage. 
#-------------------- 
#Note: If you want to apply voltage: ReaxFF, COMP3, DFTBP (DFTB+) and ESM-RISM (QE, OpenMX, etc) 
# I think we need to rewrite the charge part a little in DFTBP. 
#-------------------- 

#-------------------- Energy Minimization ------------------------------------------------
# 0 [K], structure optimization 
minimize 1.0e-4 1.0e-6 100 1000 # Normal case 
# minimize 0.0 1.0e-8 1000 100000 # More accurate case 

#-------------------- Settings -----------------------------------------------------------
reset_timestep 0 

timestep 0.1 # 0.1 [fs], sets the timestep for subsequent simulations 
#-------------------- 
#Note: 10 [fs] = about 3335.6 [cm^-1] (This corresponds to C-H, O-H or N-H stretching vibration, etc) 
#Setting dt = 1 [fs] corresponds to dividing the period of these vibrations into 10. 
#For systems consisting of heavy elements, a larger dt can be set by estimating from the reduced mass. 
#However, 1 [fs] is usually selected except for ReaxFF and AIREBO. 
#Theoretically, AIREBO is said to be good at 0.01 [fs], but this is a difficult calculation, 
# so in reality it is calculated at 0.1 [fs]. It's good to remember this.
#-------------------- 
#Reduced mass (RM) table 
# element 1:1 | RM = 44.4525 | sqrt(RM) =  6.67 
# dt = 0.100000*min(sqrt(RM)) 
#-------------------- 

thermo 100 # computes and prints thermodynamic 
thermo_style custom step temp vol press etotal # specifies content of thermodynamic data to be printed in screen 

#------------ calculate temperature per particle --------- 
variable kB   equal 1.380650e-23 # Boltzman constant [J/K] 
variable eV2J equal 1.602763e-19 # change [eV] to [J] unit 
compute ke all ke/atom           # The kinetic energy [eV] of each atom 
#-------------------- 
#Ref: variable temp atom c_ke*${eV2J}/(1.5*${kB}) #### T 
variable tempatom atom c_ke*${eV2J}*(2/3)/${kB} # ke = (1/2)*m*v^2 = (3/2)*kB*T, T = ke*(2/3)/kB 
#dump d1 all cfg 100 cfg/run_temp.*.cfg mass type xs ys zs id type q vx vy vz fx fy fz v_tempatom 
#-------------------- 
fix ave_tempatom all ave/atom 1 100 100 v_tempatom # Average calculation for temperature of each atom 
dump d1 all cfg 100 cfg/run_temp.*.cfg mass type xs ys zs id type q vx vy vz fx fy fz f_ave_tempatom 
#-------------------- 
dump_modify d1 element ${elem} 
#-------------------- 
# References 
# [1] M. Li et al., Nanomaterials 2019, 9(3), 347; https://doi.org/10.3390/nano9030347 
# URL: https://www.mdpi.com/2079-4991/9/3/347 
# Supplementary Materials: https://www.mdpi.com/2079-4991/9/3/347/s1 
#--------------------------------------------------------- 


# sets the velocity of a group of atoms 
velocity all create 77.0 123456 rot yes mom yes dist gaussian 

#-------------------- Run the simulation -------------------------------------------------
dt = ${dt_ex}# stress-strain Simulation 
compute 1 all stress/atom NULL  # computes the symmetric per-atom stress tensor for each atom in a group. 
compute 2 all temp              # computes the temp of a group of atoms 
compute 3 all reduce sum c_1[2] # reduces vector quantities of all stress tensors in y-direction and adds all the quantities to a single 
compute kea all ke/atom         # This is related to temperature 

variable    tmp equal ly 
variable     lo equal ${tmp} 
variable strain equal (ly-v_lo)/v_lo 

#for units metal, pressure is in 1 [bars] = 100 [kPa] = 0.1 [MPa] = 1x10^-4 [GPa] => p, is in GPa 
variable     p2 equal -pyy/10000         # assign a value to the variable name strain 

variable stress     equal c_3/vol        # assigns a value to the variable name stress 
variable stress_GPa equal v_stress/10000 # converts the stress calculated to GPa 
variable stress_MPa equal v_stress_GPa*1000 # Note: 1 GPa = 1000 MPa 

thermo_style custom step temp press vol etotal c_2 v_strain v_stress v_stress_GPa v_stress_MPa v_p2 

#---------- output file settings -------------------
fix fo1 all ave/time 1 3 3 c_2 v_strain v_stress v_stress_GPa v_p2 file stress_vs_strain.txt 
#---------------------------------------------------
undump d1 
dump        d2 all cfg 100 cfg/run.*.cfg mass type xs ys zs id type vx vy vz fx fy fz c_kea 
dump_modify d2 element ${elem} 
#---------------------------------------------------

# Compression Simulation 
#-------------------- Run the simulation -------------------------------------------------
# strain rate of -0.040 [1/dt] is applied in y direction 
fix d1 all deform 1 y erate ${es_rate} 

# all atoms rescaled to new positions while temp and pressure is conserved 
fix 2 all npt temp ${HT} ${HT} $(dt*v_Nsteps) x 0 0 $(dt*v_Nsteps) z 0 0 $(dt*v_Nsteps) dilate all # Adiabatic conditions 

# Resets the temp of atoms to 1500.00 K by rescaling velocities after every 10 steps 
fix 3 all temp/rescale 10 ${HT} ${HT} 0.05 1.0 

# number of iterations is given so as to give 40% strain to the material 
run ${Nsteps} # program is run for Nsteps iterations (Note: dt_es*${Nsteps}/1000 =   0.80 [ps])

#-------------------------------------------------------------------------------- 
# The calculation conditions for this time are as follows. 
#-------------------------------------------------------------------------------- 
variable strain_rate_percent equal "(v_strain)/(v_dt_ps * v_Nsteps)*100" # [%/ps] 
variable strain_rate equal "(v_strain)/(v_dt_ps * v_Nsteps)" # [1/ps] 
print "strain_rate: ${strain_rate_percent} [%/ps] at setting temperature ${HT} [K]" 
print "strain rate: ${strain_rate} x 10^12 [1/s] at setting temperature ${HT} [K]" 
#-------------------------------------------------------------------------------- 

#-------------------------------------------------------------------------------- 
# Note 
# compute        peratom all stress/atom NULL 
# compute        p all reduce sum c_peratom[1] c_peratom[2] c_peratom[3] 
# variable       press equal -(c_p[1]+c_p[2]+c_p[3])/(3*vol) 
# # pxx = -c_p[1]/(3*vol), pyy = -c_p[2]/(3*vol), pzz = -c_p[3]/(3*vol) 
# thermo_style   custom step temp etotal press v_press 
# metal unit: press = bar = 0.1 MPa, length = Angstrom = 1e-10 m 
#-------------------------------------------------------------------------------- 

#-------------------- Output data (RDF)---------------------------------------------------
# calculates the radial distribution function (RDF) and output file 
# These are templates for input files. Please rewrite it to suit your needs. 

# RDF settings 
compute 11 all rdf 100 
fix r1 all ave/time 100 1 100 c_11[*] file rdf_strain.rdf mode vector 

# Sets NVT and Run NVT + RDF calculations 
fix f2 all nvt temp ${HT} ${HT} $(100.0*dt) 
run ${Nsteps} # program is run for Nsteps iterations (Note: dt*${Nsteps}/1000 =   0.80 [ps])
unfix f2 

#-------------------- Output data file ---------------------------------------------------
write_data output.dat 

#-------------------- End ----------------------------------------------------------------
